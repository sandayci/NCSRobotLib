#include <stdio.h>
#include <string.h>    //strlen
#include <sys/socket.h>
#include <arpa/inet.h> //inet_addr
#include <unistd.h>    //write
#include <stdlib.h>
#include <getopt.h>
#include <signal.h>
#include <string.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <assert.h>
#include <errno.h>
#include <sys/types.h>
#include <stdbool.h>
#include <stdint.h>
#include <syslog.h>
#include <sys/time.h>
#include <unistd.h>
#include <dirent.h>
#include <libwebsockets.h>
#include <paex.h>
#include <pthread.h> //for threading 
 
#include "comm/aerctl.h"
#define PORT_MON 5002

//the thread function
void *connection_handler(void *);
 
int main(int argc , char *argv[])
{
 
	int socket_desc , client_sock , c , *new_sock;
  struct sockaddr_in server , client;

  //open device for reading events
	aerOpenDevice();

  //Create socket
  socket_desc = socket(AF_INET , SOCK_STREAM , 0);
  if (socket_desc == -1)
  {
		printf("Could not create socket");
  }
	puts("Socket created");	        

	//Prepare the sockaddr_in structure
	server.sin_family = AF_INET;
	server.sin_addr.s_addr = INADDR_ANY;
	server.sin_port = htons( PORT_MON );

	//Bind
	if( bind(socket_desc,(struct sockaddr *)&server , sizeof(server)) < 0)
	{
	 	//print the error message
	 	perror("bind failed. Error");
	 	return 1;
	}
	puts("bind done");

	//Listen
	listen(socket_desc , 3);
	         
	//Accept and incoming connection
	puts("Waiting for incoming connections...");
	c = sizeof(struct sockaddr_in);
	
	//Accept and incoming connection
	puts("Waiting for incoming connections...");
	c = sizeof(struct sockaddr_in);
	//while( (client_sock = accept(socket_desc, (struct sockaddr *)&client, (socklen_t*)&c)) )
	while(1){ 
		 client_sock = accept(socket_desc, (struct sockaddr *)&client, (socklen_t*)&c);
		 
	   puts("Connection accepted");
	             
	   pthread_t sniffer_thread;
	   new_sock = malloc(1);
	   *new_sock = client_sock;
	                                                      
	   if( pthread_create( &sniffer_thread , NULL ,  connection_handler , (void*) new_sock) < 0)
	    {
	       perror("could not create thread");
	       return 1;
	     }

		   //Now join the thread , so that we dont terminate before the thread
		   pthread_join( sniffer_thread , NULL);
		   puts("Handler assigned");
  }
			
}

/*
 *  * This will handle connection for each client
 *   * */
void *connection_handler(void *socket_desc)
{
	    //Get the socket descriptor
			int sock = *(int*)socket_desc;
			int read_size;
			char *message , client_message[4096];
			int ww;
			char *valueBias;
			char *valueAer;
			
	 		//open device for reading events
	   	aerOpenDevice();
		
			//Receive a message from client
			while(1){  
	
			read_size = recv(sock , client_message , sizeof(client_message) , 0);
			
			//Send the message back to client
			write(sock , client_message , strlen(client_message));
	
			//printf("Client_message %s\n", client_message);
			client_message[read_size] = '\0';
			if (client_message[0] =='B')
			{
			  	//printf("Eccomi");
					//client_message[read_size] = '\0';
				  valueBias =  &client_message[1];
				  ww = (int)valueBias;
				  BGSet(atoi(valueBias));
				  client_message[read_size] = '\0';
				  //printf("Message: %s\n", valueBias);
			}
			 else
			{
			 		client_message[read_size] = '\0';
					valueAer =  &client_message[0];
					//printf("message received: %s\n", client_message);
				  //printf("message aer: %d\n", (atoi(valueAer)));
				  aerWriteBits(atoi(valueAer));
				  //usleep(1000);
				  client_message[read_size] = '\0';
	     	  //printf("Message: %d\n", atoi(valueAer));
			}
      }

			//if(read_size == 0)
			//{
				//puts("Client disconnected");
				//fflush(stdout);
			//}
			//else if(read_size == -1)
			//{  
			 // perror("recv failde");
			//}

			free(socket_desc);
         
		   //return 0;
}


			   
